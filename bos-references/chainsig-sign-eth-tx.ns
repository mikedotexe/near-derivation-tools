/* eslint-disable no-implicit-globals */
/* eslint-disable no-restricted-globals */

const { accountId } = context;
// noinspection
if (!accountId) return <h4>Please Sign In with your Near Account</h4>;

// get pending tx or user args path, to address
const baseTx = Storage.privateGet("baseTx");
const txPayload = Storage.privateGet("txPayload");
const to = Storage.privateGet("to");
const path = Storage.privateGet("path");
const amount = Storage.privateGet("amount");
const useMock = Storage.privateGet("useMock");
const loading = <p>Loading...</p>;

if (to === null || path === null || amount === null) {
    return loading;
}

// works but why?

const gasPricePreFetch = fetch(
    `https://sepolia.beaconcha.in/api/v1/execution/gasnow`
);

// settings
const mpcMockContract = `signer.canhazgas.testnet`;
const mpcContract = `multichain-testnet-2.testnet`;
const chainId = 11155111; // SEPOLIA
const nearGas = 300000000000000;
const gasLimit = 21000;

initState({
    amount: "0.1",
    to,
    path: path || "ethereum,1",
    amount: amount || "0.01",
    useMock: useMock || false,
});

// helpers

const flashAlert = (alert, dur) => {
    State.update({
        alert,
    });
    setTimeout(() => State.update({ alert: null }), dur || 3000);
};

const refreshBalance = () => {
    State.update({
        balance: "loading...",
    });
    getEthereumAddress(state.path, state.address);
};

const getSepoliaProvider = () => {
    return new ethers.providers.JsonRpcProvider(
        "https://ethereum-sepolia.publicnode.com"
    );
};

// spoof Ethereum publicKey to match mock contract
const getEthereumAddress = (path, address) => {
    // using mock contract
    if (!address) {
        const signingKey = new ethers.utils.SigningKey(
            ethers.utils.sha256(ethers.utils.toUtf8Bytes(accountId + "," + path))
        );
        address = ethers.utils.computeAddress(signingKey.privateKey);
    }

    console.log("getEthereumAddress", address);

    getSepoliaProvider()
        .getBalance(address)
        .then((balance) => {
            State.update({
                address,
                balance: ethers.utils.formatEther(balance),
            });
        });
};

if (!state.address && state.useMock) {
    getEthereumAddress(state.path);
    return loading;
}

if (!state.mpcKey) {
    State.update({
        mpcKey: Near.view(
            state.useMock ? mpcMockContract : mpcContract,
            "public_key"
        ),
    });
    return loading;
}

// returning from signing with txHash in url props

let txHash = props.transactionHashes;
if (txHash) {
    txHash = txHash.split(",")[0];
}

const decodeTx = () => {
    if (!baseTx || !txPayload) return;

    const res = fetch(`https://rpc.testnet.near.org`, {
        method: "POST",
        headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
        },
        body: JSON.stringify({
            jsonrpc: "2.0",
            id: "dontcare",
            method: "EXPERIMENTAL_tx_status",
            params: [txHash, "md1.testnet"],
        }),
    });

    if (!res || !res.ok) {
        return setTimeout(decodeTx, 500);
    }

    const args = JSON.parse(
        atob(res.body.result.transaction.actions[0].FunctionCall.args)
    );
    const sigRes = JSON.parse(atob(res.body.result.status.SuccessValue));

    if (JSON.stringify(args.payload) !== JSON.stringify(txPayload)) return;

    if (!state.useMock) {
        args.payload.reverse();
    }

    const sig = {
        r: "0x" + sigRes[0].substring(2).toLowerCase(),
        s: "0x" + sigRes[1].toLowerCase(),
        v,
    };
    let addressRecovered = false;
    for (let v = 0; v < 2; v++) {
        sig.v = v + chainId * 2 + 35;
        const recoveredAddress = ethers.utils
            .recoverAddress(args.payload, sig)
            .toLowerCase();
        if (recoveredAddress === state.address) {
            addressRecovered = true;
            break;
        }
    }

    if (!addressRecovered) {
        console.log("signature failed to recover to correct address");
        return;
    }

    const signedTx = ethers.utils.serializeTransaction(baseTx, sig);
    console.log("signed tx", signedTx);

    getSepoliaProvider()
        .send("eth_sendRawTransaction", [signedTx])
        .then((hash) => {
            flashAlert(
                "TX Sent! Explorer link will appear soon and balance will update automatically in 30s"
            );
            setTimeout(() => {
                flashAlert(
                    <a href={`https://sepolia.etherscan.io/tx/${hash}`} target="_blank">
                        Explorer Link
                    </a>,
                    60000
                );
            }, 4000);
            setTimeout(refreshBalance, 50000);
            setTimeout(refreshBalance, 120000);
        })
        .catch((e) => {
            if (/nonce too low/gi.test(JSON.stringify(e))) {
                console.log("tx has been tried, removing localStorage");
                Storage.privateSet("baseTx", undefined);
                Storage.privateSet("txPayload", undefined);
                return;
            }
            if (/gas too low|underpriced/gi.test(JSON.stringify(e))) {
                console.log(e);
                flashAlert(
                    "Insufficient funds or gas too low. Try sending a smaller amount."
                );
                return;
            }
            console.log(e);
        });
};

if (!state.decoded && txHash && state.address) {
    decodeTx();
    State.update({ decoded: true });
    return loading;
}

// Use MPC to sign

const sign = () => {
    let to = state.to;
    try {
        to = ethers.utils.getAddress(to);
    } catch (e) {
        return flashAlert(
            "Invalid to address. Please add a proper Ethereum address to send ETH to."
        );
    }

    getSepoliaProvider()
        .getTransactionCount(state.address)
        .then((nonce) => {
            // Ethereum TX
            const amount = state.amount;
            // 2 gwei + some randomness
            const gasPriceFetch = fetch(
                `https://sepolia.beaconcha.in/api/v1/execution/gasnow`
            );
            const gasPriceData = gasPriceFetch || gasPricePreFetch;
            const { rapid, fast, standard } = gasPriceData.body.data;
            const gasPrice = Math.max(rapid, fast, standard);
            if (!gasPrice) {
                return flashAlert(
                    "Unable to get gas price. Please refresh and try again."
                );
            }

            const value = ethers.utils.hexlify(ethers.utils.parseUnits(amount));

            if (value === "0x00") {
                return flashAlert("Amount is zero. Please try a non-zero amount.");
            }

            const baseTx = {
                to,
                nonce,
                data: [],
                value: value,
                gasLimit,
                gasPrice,
                chainId,
            };

            // check balance
            if (
                !state.balance ||
                new BN(ethers.utils.parseUnits(state.balance).toString()).lt(
                    new BN(ethers.utils.parseUnits(amount).toString()).add(
                        new BN(gasPrice).mul(new BN(gasLimit))
                    )
                )
            ) {
                return flashAlert("Insufficient funds");
            }

            Storage.privateSet("baseTx", baseTx);
            const unsignedTx = ethers.utils.serializeTransaction(baseTx);
            const txHash = ethers.utils.keccak256(unsignedTx);
            const payload = Object.values(ethers.utils.arrayify(txHash));
            if (!state.useMock) payload.reverse();
            Storage.privateSet("txPayload", payload);

            Near.call(
                state.useMock ? mpcMockContract : mpcContract,
                "sign",
                {
                    payload,
                    path: state.path,
                },
                nearGas
            );
        });
};

const Theme = styled.div`
  box-sizing: border-box;
  margin: auto;
  text-align: center;

  .alert {
    background-color: #eeeeff
  }

  .container {
  text-align: left;
    width: 516px;
  }
  .group {
    display: flex;
    justify-content: flex-start;
    margin-bottom: 16px;
    line-height: 32px;
    > div, > input {
      margin-right: 16px;
    }
    > input {
      border: 1px solid #ddd;
      border-radius: 8px !important;
      padding: 0 4px;
      width: 100px;
    }
    > div:nth-child(1) {
      width: 40px;
    }
    > .address {
      width: 416px;
    }
  }
`;

return (
    <Theme>
        <div className="container">
            {!state.useMock && (
                <iframe
                    style={{ display: "none" }}
                    src={"https://near-mpc-kdf-iframe.pages.dev/"}
                    message={state.message}
                    onMessage={(res) => {
                        if (res.loaded) {
                            State.update({
                                message: { publicKey: state.mpcKey, accountId, path },
                            });
                        }
                        if (res.address) {
                            getEthereumAddress(state.path, res.address);
                        }
                    }}
                />
            )}
            <h4>Send ETH using Near Account</h4>

            {state.alert && <p className="alert">{state.alert}</p>}

            <p>
                Sending Ethereum Address:
                <br />
                <a
                    href={`https://sepolia.etherscan.io/address/${state.address}`}
                    target="_blank"
                >
                    {state.address}
                </a>
                <br />
                Balance: {state.balance}{" "}
                {state.balance === "0.0" && (
                    <span>(fund account before sending from Near)</span>
                )}
            </p>

            <div className="group">
                <div>Path</div>
                <input
                    className="amount"
                    type="text"
                    value={state.path}
                    onChange={({ target: { value } }) => {
                        if (state.useMock) {
                            getEthereumAddress(value);
                        } else {
                            State.update({
                                message: { publicKey: state.mpcKey, accountId, path: value },
                            });
                        }
                        Storage.privateSet("path", value);
                        State.update({ path: value });
                    }}
                />
                <div>
                    + &nbsp;<strong>{accountId}</strong>
                </div>
            </div>

            {state.balance && !["0.0", "loading..."].includes(state.balance) ? (
                <>
                    <div className="group">
                        <div>Send</div>
                        <input
                            className="amount"
                            min={0.01}
                            max={1}
                            step={0.01}
                            type="number"
                            value={state.amount}
                            onChange={({ target: { value } }) => {
                                Storage.privateSet("amount", value);
                                State.update({ amount: value });
                            }}
                        />
                        <div>ETH</div>
                    </div>
                    <div className="group">
                        <div>To</div>
                        <input
                            placeHolder="0x0123456789abcdef..."
                            className="address"
                            type="text"
                            value={state.to}
                            onChange={({ target: { value } }) => {
                                Storage.privateSet("to", value);
                                State.update({ to: value });
                            }}
                        />
                    </div>
                    <div className="group">
                        <div></div>
                        <button onClick={sign}>Send</button>
                    </div>
                </>
            ) : (
                <div className="group">
                    <div></div>
                    <button onClick={refreshBalance}>Refresh Balance</button>
                </div>
            )}

            <p>NEAR Signing Contract: {state.useMock ? "MOCK MPC" : "Testnet MPC"}</p>
            <button
                onClick={() => {
                    Storage.privateSet("useMock", !state.useMock);
                    State.update({ useMock: !state.useMock });
                    getEthereumAddress(state.path);
                }}
            >
                Switch to {!state.useMock ? "MOCK MPC" : "Testnet MPC"}
            </button>
        </div>
    </Theme>
);
